import seaborn
import matplotlib.pyplot 
import pandas
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score,classification_report,ConfusionMatrixDisplay,f1_score,precision_score,recall_score
from sklearn.datasets import make_classification
from imblearn.over_sampling import RandomOverSampler
from imblearn.under_sampling import RandomUnderSampler
from collections import Counter
pandas.set_option('display.Max_columns',None)
loan = pandas.read_csv('scenario_3.csv')
yy = loan['Personal Loan']
xx = loan.drop(['Personal Loan','Education','Family','Securities Account','CD Account','Online','CreditCard'],axis=1)
print(Counter(yy))
print(xx)
print(xx.dtypes)
orr = RandomOverSampler()
xor,yor = orr.fit_resample(xx,yy)
srr = RandomUnderSampler()
xur,yur = srr.fit_resample(xx,yy)
print(Counter(yor))
print(Counter(yur))
n = pandas.concat([xor,yor],axis=1)
nn = pandas.concat([xur,yur],axis=1)
print(load.head())
print(load.tail())
print(n.head())
print(n.tail())
print(nn.head())
print(nn.tail())
print(load.describe())
print(load.info())
print(load.columns)
print(n.describe())
print(n.info())
print(n.columns)
print(nn.describe())
print(nn.info())
print(nn.columns)
loan = loan.dropna()
n = n.dropna()
nn = nn.dropna()
loan['CreditCard'].replace(to_replace=['No','Yes'],value=['no credit card','credit card'],inplace=True)
loan['Online'].replace(to_replace=['No','Yes'],value=['no internet banking','uses internet banking'],inplace=True)
loan['Securities Account'].replace(to_replace=['No','Yes'],value=['no security account','has security account'],inplace=True)
loan['CD Account'].replace(to_replace=['No','Yes'],value=['non certified deposit account','certified deposit account'],inplace=True)
print(loan.info())
print(loan.head())
print(loan.tail())
Education_lvl = pandas.get_dummies(loan['Education'],drop_first=True)
Has_security_account = pandas.get_dummies(loan['Securities Account'],drop_first=True)
Has_certificate_of_deposit_account = pandas.get_dummies(loan['CD Account'],drop_first=True)
Uses_internet_banking = pandas.get_dummies(loan['Online'],drop_first=True)
Uses_credit_card = pandas.get_dummies(loan['CreditCard'],drop_first=True)
loan = pandas.concat([loan,Education_lvl,Has_certificate_of_deposit_account,Has_security_account,Uses_credit_card,Uses_internet_banking],axis=1)
loan = loan.drop(['Education','Securities Account','CD Account','Online','CreditCard','Family'],axis=1)
print(loan.info())
print(loan.head())
print(loan.tail())
seaborn.countplot(data=loan,x='Personal Loan')
seaborn.countplot(data=n,x='Personal Loan')
seaborn.countplot(data=nn,x='Personal Loan')
matplotlib.pyplot.figure(figsize=(15,15))
seaborn.heatmap(loan.corr(),annot=True,cmap='coolwarm')
matplotlib.pyplot.figure(figsize=(15,15))
seaborn.heatmap(n.corr(),annot=True,cmap='coolwarm')
matplotlib.pyplot.figure(figsize=(15,15))
seaborn.heatmap(nn.corr(),annot=True,cmap='coolwarm')
pp = loan[['Income','CCAvg','Mortgage','Graduate','ID','Undergrad','non certified deposit account']]
seaborn.pairplot(pp,diag_kind='kde')
pp1 = n[['Income','CCAvg','ID','Mortgage']]
seaborn.pairplot(pp1,diag_kind='kde')
pp2 = n[['Income','CCAvg','ID','Mortgage']]
seaborn.pairplot(pp2,diag_kind='kde')
nnx = pp2
nny = nn['Personal Loan']
nnx.head()
nx = pp1
ny = n['Personal Loan']
nx.head()
loxan = pp
yloan = loan['Personal Loan']
loxan.head()
loan_training_X, X_other, y_loan_train, y_other = train_test_split(loxan, yloan, test_size=0.5, random_state=101)
loan_evalu_X,loan_testing_X,loan_evalu_y,y_loan_test = train_test_split(X_other,y_other,test_size=0.5,random_state=101)
n_training_X, nX_other, y_n_train, ny_other = train_test_split(nx,ny, test_size=0.5, random_state=101)
n_evalu_X,n_testing_X,n_evalu_y,y_n_test = train_test_split(nX_other,ny_other,test_size=0.5,random_state=101)
nn_training_X,nnX_other, y_nn_train, nny_other = train_test_split(nnx,nny, test_size=0.5, random_state=101)
nn_evalu_X,nn_testing_X,nn_evalu_y,y_nn_test = train_test_split(nnX_other,nny_other,test_size=0.5,random_state=101)
loanscale = StandardScaler()
loan_scals_X_training = loanscale.fit_transform(loan_training_X)
loan_scals_X_testing = loanscale.transform(loan_testing_X)
loan_scals_evalu_X = loanscale.fit_transform(loan_evalu_X)
n_scals_X_training = loanscale.fit_transform(n_training_X)
n_scals_X_testing = loanscale.transform(n_testing_X)
n_scals_evalu_X = loanscale.fit_transform(n_evalu_X)
nn_scals_X_training = loanscale.fit_transform(nn_training_X)
nn_scals_X_testing = loanscale.transform(nn_testing_X)
nn_scals_evalu_X = loanscale.fit_transform(nn_evalu_X)
log_model = LogisticRegression()
log_model1 = LogisticRegression()
log_model2 = LogisticRegression()
log_model.fit(loan_scals_X_training,y_loan_train)
log_model1.fit(n_scals_X_training,y_n_train)
log_model2.fit(nn_scals_X_training,y_nn_train)
y_loan_pred = log_model.predict(loan_scals_evalu_X)
y_n_pred = log_model1.predict(n_scals_evalu_X)
y_nn_pred = log_model2.predict(nn_scals_evalu_X)
print('log accuracy:',accuracy_score(loan_evalu_y,y_loan_pred))
print('log precision:',precision_score(loan_evalu_y,y_loan_pred))
print('log recall:',recall_score(loan_evalu_y,y_loan_pred))
print('log f1:',f1_score(loan_evalu_y,y_loan_pred))
print('log report:')
print(classification_report(loan_evalu_y,y_loan_pred))
ConfusionMatrixDisplay.from_estimator(log_model,loan_scals_evalu_X,loan_evalu_y)
matplotlib.pyplot.title('tp,fp',fontsize=15)
matplotlib.pyplot.xlabel('fn,tn',fontsize=15)
matplotlib.pyplot.ylabel('')
print('log accuracy:',accuracy_score(loan_evalu_y,y_loan_pred))
print('log precision:',precision_score(loan_evalu_y,y_loan_pred))
print('log recall:',recall_score(loan_evalu_y,y_loan_pred))
print('log f1:',f1_score(loan_evalu_y,y_loan_pred))
print('log report:')
print(classification_report(loan_evalu_y,y_loan_pred))
ConfusionMatrixDisplay.from_estimator(log_model1,loan_scals_evalu_X,loan_evalu_y)
matplotlib.pyplot.title('tp,fp',fontsize=15)
matplotlib.pyplot.xlabel('fn,tn',fontsize=15)
matplotlib.pyplot.ylabel('')
print('log accuracy:',accuracy_score(n_evalu_y,y_n_pred))
print('log precision:',precision_score(n_evalu_y,y_n_pred))
print('log recall:',recall_score(n_evalu_y,y_n_pred))
print('log f1:',f1_score(n_evalu_y,y_n_pred))
print('log report:')
print(classification_report(nn_evalu_y,y_nn_pred))
ConfusionMatrixDisplay.from_estimator(log_model2,nn_scals_evalu_X,nn_evalu_y)
matplotlib.pyplot.title('tp,fp',fontsize=15)
matplotlib.pyplot.xlabel('fn,tn',fontsize=15)
matplotlib.pyplot.ylabel('')
knnc = KNeighborsClassifier(n_neighbors=1)
knnc1 = KNeighborsClassifier(n_neighbors=1)
knnc2 = KNeighborsClassifier(n_neighbors=1)
knnc.fit(loan_scals_X_training,y_loan_train)
knnc1.fit(n_scals_X_training,y_n_train)
knnc2.fit(nn_scals_X_training,y_nn_train)
yloanpred = knnc.predict(loan_scals_evalu_X)
ynpred = knnc1.predict(n_scals_evalu_X)
ynnpred = knnc2.predict(nn_scals_evalu_X)
print('knn accuracy:',accuracy_score(loan_evalu_y,yloanpred))
print('knn precision:',precision_score(loan_evalu_y,yloanpred))
print('knn recall:',recall_score(loan_evalu_y,yloanpred))
print('knn f1:',f1_score(loan_evalu_y,yloanpred))
print('knn report:')
print(classification_report(loan_evalu_y,yloanpred))
ConfusionMatrixDisplay.from_estimator(knnc,loan_scals_evalu_X,loan_evalu_y)
matplotlib.pyplot.title('tp,fp',fontsize=15)
matplotlib.pyplot.xlabel('fn,tn',fontsize=15)
matplotlib.pyplot.ylabel('')
print('knn accuracy:',accuracy_score(n_evalu_y,ynpred))
print('knn precision:',precision_score(n_evalu_y,ynpred))
print('knn recall:',recall_score(n_evalu_y,ynpred))
print('knn f1:',f1_score(n_evalu_y,ynpred))
print('knn report:')
print(classification_report(n_evalu_y,ynpred))
ConfusionMatrixDisplay.from_estimator(knnc1,n_scals_evalu_X,n_evalu_y)
matplotlib.pyplot.title('tp,fp',fontsize=15)
matplotlib.pyplot.xlabel('fn,tn',fontsize=15)
matplotlib.pyplot.ylabel('')
print('knn accuracy:',accuracy_score(nn_evalu_y,ynnpred))
print('knn precision:',precision_score(nn_evalu_y,ynnpred))
print('knn recall:',recall_score(nn_evalu_y,ynnpred))
print('knn f1:',f1_score(nn_evalu_y,ynnpred))
print('knn report:')
print(classification_report(nn_evalu_y,ynnpred))
ConfusionMatrixDisplay.from_estimator(knnc2,nn_scals_evalu_X,nn_evalu_y)
matplotlib.pyplot.title('tp,fp',fontsize=15)
matplotlib.pyplot.xlabel('fn,tn',fontsize=15)
matplotlib.pyplot.ylabel('')
